{"ast":null,"code":"var _jsxFileName = \"/home/nish/Documents/hostel-mess-management-system/hostel-mess-management-system/src/components/AdminDashboard/InventoryManagement.js\",\n  _s = $RefreshSig$();\n// src/components/AdminDashboard/InventoryManagement.js\nimport React, { useEffect, useState } from 'react';\nimport { getInventory, updateInventory } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InventoryManagement = () => {\n  _s();\n  const [inventory, setInventory] = useState([]);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    const fetchInventory = async () => {\n      try {\n        const data = await getInventory();\n        setInventory(data);\n      } catch (err) {\n        setError('Failed to fetch inventory');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInventory();\n  }, []);\n  const handleQuantityChange = (index, newQuantity) => {\n    const updatedInventory = [...inventory];\n    updatedInventory[index].quantity = newQuantity;\n    setInventory(updatedInventory);\n  };\n  const handleUpdate = async () => {\n    try {\n      await updateInventory(inventory);\n      alert('Inventory updated successfully!');\n    } catch (err) {\n      setError('Failed to update inventory');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading inventory...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inventory Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: inventory.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: item.quantity,\n          onChange: e => handleQuantityChange(index, parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdate,\n      children: \"Update Inventory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(InventoryManagement, \"C2q8VEPGryohFe+0OFY/F6oO2fw=\");\n_c = InventoryManagement;\nexport default InventoryManagement;\nvar _c;\n$RefreshReg$(_c, \"InventoryManagement\");","map":{"version":3,"names":["React","useEffect","useState","getInventory","updateInventory","jsxDEV","_jsxDEV","InventoryManagement","_s","inventory","setInventory","loading","setLoading","error","setError","fetchInventory","data","err","handleQuantityChange","index","newQuantity","updatedInventory","quantity","handleUpdate","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","type","value","onChange","e","parseInt","target","onClick","_c","$RefreshReg$"],"sources":["/home/nish/Documents/hostel-mess-management-system/hostel-mess-management-system/src/components/AdminDashboard/InventoryManagement.js"],"sourcesContent":["// src/components/AdminDashboard/InventoryManagement.js\nimport React, { useEffect, useState } from 'react';\nimport { getInventory, updateInventory } from '../../services/api';\n\nconst InventoryManagement = () => {\n  const [inventory, setInventory] = useState([]);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    const fetchInventory = async () => {\n      try {\n        const data = await getInventory();\n        setInventory(data);\n      } catch (err) {\n        setError('Failed to fetch inventory');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInventory();\n  }, []);\n\n  const handleQuantityChange = (index, newQuantity) => {\n    const updatedInventory = [...inventory];\n    updatedInventory[index].quantity = newQuantity;\n    setInventory(updatedInventory);\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await updateInventory(inventory);\n      alert('Inventory updated successfully!');\n    } catch (err) {\n      setError('Failed to update inventory');\n    }\n  };\n\n  if (loading) return <p>Loading inventory...</p>;\n  if (error) return <p>{error}</p>;\n\n  return (\n    <div>\n      <h2>Inventory Management</h2>\n      <ul>\n        {inventory.map((item, index) => (\n          <li key={index}>\n            {item.name}: \n            <input \n              type=\"number\" \n              value={item.quantity} \n              onChange={(e) => handleQuantityChange(index, parseInt(e.target.value))} \n            />\n          </li>\n        ))}\n      </ul>\n      <button onClick={handleUpdate}>Update Inventory</button>\n    </div>\n  );\n};\n\nexport default InventoryManagement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}