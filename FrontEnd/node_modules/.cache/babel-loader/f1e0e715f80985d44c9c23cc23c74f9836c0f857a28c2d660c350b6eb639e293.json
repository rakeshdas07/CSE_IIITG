{"ast":null,"code":"var _jsxFileName = \"/home/nish/Documents/hostel-mess-management-system/hostel-mess-management-system/src/components/AdminDashboard/MealPlan.js\",\n  _s = $RefreshSig$();\n// src/components/AdminDashboard/MealPlan.js\nimport React, { useState, useEffect } from 'react';\nimport { getMealPlan, updateMealPlan } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MealPlan = () => {\n  _s();\n  const [mealPlan, setMealPlan] = useState([]);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    const fetchMealPlan = async () => {\n      try {\n        const data = await getMealPlan();\n        setMealPlan(data);\n      } catch (err) {\n        setError('Failed to fetch meal plan');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMealPlan();\n  }, []);\n  const handleSave = async () => {\n    try {\n      await updateMealPlan(mealPlan);\n      alert('Meal plan updated successfully!'); // Simple feedback\n    } catch (err) {\n      setError('Failed to update meal plan');\n    }\n  };\n  const handleChange = (index, value) => {\n    const updatedPlan = [...mealPlan];\n    updatedPlan[index].menu = value; // Update the menu for the specific day\n    setMealPlan(updatedPlan);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading meal plan...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Meal Plan Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mealPlan.map((meal, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [meal.day, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: meal.menu,\n            onChange: e => handleChange(index, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(MealPlan, \"3/csF/TKKhMK6APkV0weZk8QO9M=\");\n_c = MealPlan;\nexport default MealPlan;\nvar _c;\n$RefreshReg$(_c, \"MealPlan\");","map":{"version":3,"names":["React","useState","useEffect","getMealPlan","updateMealPlan","jsxDEV","_jsxDEV","MealPlan","_s","mealPlan","setMealPlan","loading","setLoading","error","setError","fetchMealPlan","data","err","handleSave","alert","handleChange","index","value","updatedPlan","menu","children","fileName","_jsxFileName","lineNumber","columnNumber","map","meal","day","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/nish/Documents/hostel-mess-management-system/hostel-mess-management-system/src/components/AdminDashboard/MealPlan.js"],"sourcesContent":["// src/components/AdminDashboard/MealPlan.js\nimport React, { useState, useEffect } from 'react';\nimport { getMealPlan, updateMealPlan } from '../../services/api';\n\nconst MealPlan = () => {\n  const [mealPlan, setMealPlan] = useState([]);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    const fetchMealPlan = async () => {\n      try {\n        const data = await getMealPlan();\n        setMealPlan(data);\n      } catch (err) {\n        setError('Failed to fetch meal plan');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMealPlan();\n  }, []);\n\n  const handleSave = async () => {\n    try {\n      await updateMealPlan(mealPlan);\n      alert('Meal plan updated successfully!'); // Simple feedback\n    } catch (err) {\n      setError('Failed to update meal plan');\n    }\n  };\n\n  const handleChange = (index, value) => {\n    const updatedPlan = [...mealPlan];\n    updatedPlan[index].menu = value; // Update the menu for the specific day\n    setMealPlan(updatedPlan);\n  };\n\n  if (loading) return <p>Loading meal plan...</p>;\n  if (error) return <p>{error}</p>;\n\n  return (\n    <div>\n      <h2>Meal Plan Management</h2>\n      <ul>\n        {mealPlan.map((meal, index) => (\n          <li key={index}>\n            <label>\n              {meal.day}:\n              <input\n                type=\"text\"\n                value={meal.menu}\n                onChange={(e) => handleChange(index, e.target.value)}\n              />\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button onClick={handleSave}>Save Changes</button>\n    </div>\n  );\n};\n\nexport default MealPlan;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}